Spring源代码分析
spring核心逻辑AbstractApplicationContext的refresh()方法如下

public void refresh() {
    synchronized (this.startupShutdownMonitor) {
        // 刷新前的预准备工作
        prepareRefresh();
        // 提取bean的配置信息并封装成BeanDefinition实例，然后将其添加到注册中心。注册中心是一个ConcurrentHashMap<String,BeanDefinition>类型，key为Bean的名字，value为BeanDefinition实例。
        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();
       //对beanFactory进行一些配置，注册一些BeanPostProcessor和一些特殊的Bean。
        prepareBeanFactory(beanFactory);

            //留给子类在BeanFactory准备工作完成后处理一些工作。
            postProcessBeanFactory(beanFactory);
           //调用 BeanFactory的后置处理器。
           invokeBeanFactoryPostProcessors(beanFactory);
           //注册Bean的后置处理器。
            registerBeanPostProcessors(beanFactory);
            //国际化相关功能
            initMessageSource();
            //初始化事件派发器；
            initApplicationEventMulticaster();
            // 提供给子容器类，供子容器去实例化其他的特殊的Bean
            onRefresh();
            // 处理容器中已有的ApplicationListener
            registerListeners();
            //初始化容器中剩余的单实例bean
            finishBeanFactoryInitialization(beanFactory);
            //最后一步
            finishRefresh();

        }
    }
prepareRefresh()刷新前的预处理
1. 记录启动时间，设置容器的active和close状态。
2. initPropertySources():初始化一些属性设置,提供给子容器类，子容器类可覆盖该方法进行一些自定义的属性设置。
3. getEnvironment().validateRequiredProperties()：检验属性的合法性
4. this.earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>() ：保存容器中的一些早期的事件，待事件多播器创建后执行。
obtainFreshBeanFactory()获取BeanFactory
提取bean的配置信息并封装成BeanDefinition实例，然后将其添加到注册中心。注册中心是一个ConcurrentHashMap<String,BeanDefinition>类型，key为Bean的名字，value为BeanDefinition实例。

1. refreshBeanFactory：【刷新并创建BeanFactory】如果当前容器已经有了BeanFactory就销毁原来的BeanFactory。然后创建一个DefaultListableBeanFactory();
    * 创建了一个this.beanFactory = new DefaultListableBeanFactory();
    * 设置id,返回刚才GenericApplicationContext创建的BeanFactory对象
    * 将创建的BeanFactory【DefaultListableBeanFactory】返回
2. getBeanFactory() 简单的返回beanFactory，即DefaultListableBeanFactory。
prepareBeanFactory（BeanFactory）;BeanFactory的预准备工作(BeanFactory进行一些设置)
1. 设置BeanFactory的类加载器、支持SPEL表达式的解析器。
2. 添加部分BeanPostProcess【ApplicationContextAwareProcessor】用于处理XXXAware接口的回调。
3. 设置忽略的自动装配接口EnvironmentAware、EmbeddedValueResolverAware
4. 注册可以解析的自动装配,我们能直接在任何组件中自动注入:
        BeanFactory、ResourceLoader、ApplicationEventPublisher、ApplicationContext
5. 添加BeanPostProcess【ApplicationListenerDetector】
6.添加编译时的AspectJ
7.给beanFactory注册一些能用的组件
    environment【ConfigurableEnvironment】
    systemProperties【Map<String, Object> getSystemProperties()】
    systemEnvironment【Map<String, Object> getSystemEnvironment()】

postProcessBeanFactory（beanFactory）;beanFactory准备工作完成后进行的后置处理工作
1.子类通过重写这个方法在BeanFactory创建并预准备完成后进行的后置处理工作
==============================================================================以上时BeanFactory的创建及预准备工作==============================================================================

invokeBeanFactoryPostProcessors(beanFactory);执行BeanFactoryPostProcessor
    BeanFactoryPostProcessor:BeanFactory的后置处理器,在BeanFactory标准初始化执行之后执行的
    两个接口BeanFactoryPostProcessor和BeanDefinitionRegistryPostProcessor

1.执行BeanFactoryPostProcessor的方法:


    先执行BeanDefinitionRegistryPostProcessor
    1)、获取所有的BeanDefinitionRegistryPostProcessor
    2)、先执行实现了PriorityOrdered优先级接口的BeanDefinitionRegistryPostProcessor
        			postProcessor.postProcessBeanDefinitionRegistry(registry);
    3)、再执行实现了Ordered顺序接口的BeanDefinitionRegistryPostProcessor
            		postProcessor.postProcessBeanDefinitionRegistry(registry);
    4)、最后执行没有实现任何优先级或顺序接口的BeanDefinitionRegistryPostProcessor
            		postProcessor.postProcessBeanDefinitionRegistry(registry);


    再执行BeanFactoryPostProcessor的方法
    1)、获取所有的BeanFactoryPostProcessor
    2)、先执行实现了PriorityOrdered优先级接口的BeanFactoryPostProcessor
			        postProcessor.postProcessBeanFactory(beanFactory);
    3)、再执行实现了Ordered顺序接口的BeanFactoryPostProcessor
			        postProcessor.postProcessBeanFactory(beanFactory);
    4)、最后执行没有实现任何优先级或顺序接口的BeanFactoryPostProcessor
			        postProcessor.postProcessBeanFactory(beanFactory);


第6步
registerBeanPostProcessors(BeanFactory);注册BeanPostProcessor(Bean的后置处理器)【intercept bean creation】
       不同接口类型BeanPostProcessor;在Bean创建前后对执行时机是不一样的
        BeanPostProcessor、
        DestructionAwareBeanPostProcessor、
        InstantiationAwareBeanPostProcessor、
        SmartInstantiationAwareBeanPostProcessor、
        MergedBeanDefinitionPostProcessor【internalPostProcessors】


    1)、获取所有的BeanFactoryProcess;后置处理器都默认可以通过PriorityOrdered、Ordered接口来执行优先级
    2)、先注册PriorityOrdered优先级接口的BeanPostProcessor;
        把每一个BeanPostProcessor;添加到BeanFactory中
            beanFactory.addBeanPostProcessor(postProcessor);

    3)、再注册Ordered接口的
    4)、最后注册没有实现任何优先级接口的
    5)、最终注册MergedBeanDefinitionPostProcessor,它叫internalPostProcessors
    6)、注册一个ApplicationListenerDetector;在Bean创建完成后检查是否是ApplicationListener;
          如果是this.applicationContext.addApplicationListener((ApplicationListener<?>) bean);

第7步
initMessageSource();初始化MessageSource组件(做国际化相关功能,消息绑定,消息解析)
    1)、获取BeanFactory
    2)、看容器中是否有id为messageSource的,类型是MessageSource的组件
        如果有赋值给messageSource,没有则自己创建一个new DelegatingMessageSource();
            MessageSource:一般用于取出国际化配置文件中的某个key的值,能按照区域信息获取
    3)、把创建好的MessageSource注册到容器中,以后获取国际化配置文件的值时候,可以自动注入MessageSource
            beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);
            	MessageSource.getMessage(String code, @Nullable Object[] args, @Nullable String defaultMessage, Locale locale);

第八步:
initApplicationEventMulticaster();初始化事件派发器
    1)、获取BeanFactory
    2)、从BeanFactory中获取applicationEventMulticaster的组件ApplicationEventMulticaster
    3)、如果上一步没有配置,创建一个SimpleApplicationEventMulticaster
    4)、将创建的ApplicationEventMulticaster添加到BeanFactory中,以后其他组件直接自动注入


第九步:
onRefresh();留给子容器(子类)
    1)、子类重写这个方法,在容器刷新的时候可以重新自定义逻辑


第十步:
registerListeners();给容器中将所有项目里面的ApplicationListener注册进来
    1)、从容器拿到所有的ApplicationListener
        	String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false);
    2)、给每个监听器添加到事件派发器中
        	getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);
    3)、派发之前步骤产生的事件

第十一步:
finishBeanFactoryInitialization();初始化所有剩下的单实例Bean
    1)、beanFactory.preInstantiateSingletons();初始化剩下的单实例Bean
        1、获取容器中的所有Bean,依次进行初始化和创建对象
        2、获取Bean的定义信息,RootBeanDefinition
        3、Bean不是抽象的,是单实例的,不是懒加载的,【if (!bd.isAbstract() && bd.isSingleton() && !bd.isLazyInit()) 】
            1)、判断是否是FactoryBean;是否实现FactoryBean接口的Bean;FactoryBean.getObject()创建Bean;
            2)、不是工厂Bean,利用getBean(beanName);创建对象
                0、getBean(beanName); IOC.getBean
                1、doGetBean(name, null, null, false);
                2、先获取缓存中保存的单实例Bean,如果能获取到,说明这个Bean之前被创建过(所有被创建的单实例Bean都会被缓存起来) 【getSingleton(beanName);】
                    		/** Cache of singleton objects: bean name to bean instance. */
                    	从private final Map<String, Object> singletonObjects = new ConcurrentHashMap<>(256);

                3、如果缓存中没有就获取BeanFactory,如果是整合SpringMVC,还有获取父工厂【父子容器】
                            // Check if bean definition exists in this factory.
                  			BeanFactory parentBeanFactory = getParentBeanFactory();
                4、标记当前Bean已经被创建,因为是多线程存在已经创建可能,做一个严谨的小细节
                    				markBeanAsCreated(beanName);
                5、获取Beaa的定义信息
                     getMergedLocalBeanDefinition(beanName);
                6、获取当前Bean依赖的其他Bean,如果有按照getBean()把依赖的Bean先创建出来
                     String[] dependsOn = mbd.getDependsOn();


                7、启动单实例的Bean创建过程:
                    1)、createBean(beanName, mbd, args);
                    2)、Object bean = resolveBeforeInstantiation(beanName, mbdToUse);
                        让BeanPostProcessor先拦截返回代理对象,这是哪一个BeanPostProcessor在工作呢?
                        BeanPostProcessor有非常多,详情参考第6步,而正常的BeanPostProcessor都是在Bean创建完对象初始化前后拦截执行的,
                        现在这里我们还没有创建Bean对象,之前有一个BeanPostProcessor
                            【InstantiationAwareBeanPostProcessor】提前执行
                            触发:postProcessBeforeInstantiation
                            如果有返回值,再触发applyBeanPostProcessorsAfterInitialization

                    3)、如果前面InstantiationAwareBeanPostProcessor没有返回代理对象,调用 4)
                    4)、Object beanInstance = doCreateBean(beanName, mbdToUse, args);创建Bean
                        1)、【创建Bean实例】 createBeanInstance(beanName, mbd, args);
                                利用工厂方法或者对象的构造器创建出Bean实例
                                instantiateUsingFactoryMethod(beanName, mbd, args);
                                ConstructorResolver(this).instantiateUsingFactoryMethod(beanName, mbd, explicitArgs);
                                bean就被【工厂+反射】创建出来了
                        2)、applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);
                            调用MergedBeanDefinitionPostProcessor的bdp.postProcessMergedBeanDefinition(mbd, beanType, beanName);

                        3)、【bean属性赋值】populateBean(beanName, mbd, instanceWrapper);
                            赋值之前:
                                1)、拿到InstantiationAwareBeanPostProcessor后置处理器
                                    postProcessAfterInstantiation();
                                2)、第二次还是拿到InstantiationAwareBeanPostProcessor后置处理器
                                    postProcessPropertyValues();
                            ====================================================================================
                            赋值:
                                3)、应用Bean的属性,为属性利用Setter方法等进行反射赋值,
                                	applyPropertyValues(beanName, mbd, bw, pvs);

                        4)、【Bean初始化】initializeBean(beanName, exposedObject, mbd);
                                1)、【执行Aware接口方法】nvokeAwareMethods(beanName, bean);
                                    判断是不是这些BeanNameAware、BeanClassLoaderAware、BeanFactoryAware
                                2)、【执行后置处理器初始化之前】applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);
                                    BeanPostProcessor.postProcessBeforeInitialization(result, beanName);
                                3)、【执行初始化方法】invokeInitMethods(beanName, wrappedBean, mbd);(有实现接口和加@bean注解两种)
                                    1)、是否是InitializingBean接口的实现,执行接口规定的初始化
                                    2)、是否自定义初始化方法 mbd.getInitMethodName();
                                4)、【执行后置处理器初始化之后】applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);
                                     BeanPostProcessor.postProcessAfterInitialization(result, beanName);
                        5)、【注册Bean的销毁方法】registerDisposableBeanIfNecessary(beanName, bean, mbd);
                            // Register bean as disposable.

                    5)、将创建的Bean添加到缓存中singletonObject;
                    IOC容器就是这些Map,很多的Map里面保存了单实例Bean,环境信息,以后获取组件就是从Map中拿东西

    所有Bean都利用getBean创建完成以后
        检查所有Bean是否是SmartInitializingSingleton接口的;如果是执行smartSingleton.afterSingletonsInstantiated();


第十二步:
finishRefresh()：完成BeanFactory的初始化创建工作,IOC容器就创建完成
    1)、initLifecycleProcessor();初始化和生命周期有关的后置处理器LifecycleProcessor
        写一个LifecycleProcessor的实现类,可以在BeanFactory
            默认从容器中找是否有lifecycleProcessor的组件【LifecycleProcessor】;
                如果没有new DefaultLifecycleProcessor();
                	    并加入到容器beanFactory.registerSingleton(LIFECYCLE_PROCESSOR_BEAN_NAME, this.lifecycleProcessor);

            	void onRefresh();
            	void onClose();
    2)、getLifecycleProcessor().onRefresh();
        拿到前面定义的生命周期处理器(BeanFactory),回调onRefresh();
    3)、publishEvent(new ContextRefreshedEvent(this));发布容器刷新发布事件
    4)、LiveBeansView.registerApplicationContext(this);

==============================总结==============================

1)、Spring容器在启动的时候,先会保存所有注册的Bean的定义信息
    1)、用到这个Bean的时候,利用getBean()方法创建Bean并保存到容器中,
    2)、统一创建剩下所有Bean的时候,finishBeanFactoryInitialization(beanFactory);
    3)、后置处理器,
        1)、每一个Bean创建完成的时候,都会使用各种后置处理器进行处理,来增强Bean的功能
            AutowiredAnnotationBeanPostProcessor:处理自动注入功能,
            AnnotationAwareAspectJAutoProxyCreator来做AOP功能,给bean创建代理对象,
            等等....
            增强的功能注解:
            AsyncAnnotationBeanPostProcessor
    4)、事件驱动模型
        ApplicationListener:事件监听
            ApplicationListener<ApplicationEvent>
           【多播器】 ApplicationEventMulticaster

